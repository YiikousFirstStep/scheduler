// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: task.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "task.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace schedule {

namespace {

const ::google::protobuf::Descriptor* TimeSegment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TimeSegment_reflection_ = NULL;
const ::google::protobuf::Descriptor* Task_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Task_reflection_ = NULL;
const ::google::protobuf::Descriptor* Schedule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Schedule_reflection_ = NULL;
const ::google::protobuf::Descriptor* Tasks_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Tasks_reflection_ = NULL;
const ::google::protobuf::Descriptor* Schedules_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Schedules_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Schedules_FinalStatus_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_task_2eproto() {
  protobuf_AddDesc_task_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "task.proto");
  GOOGLE_CHECK(file != NULL);
  TimeSegment_descriptor_ = file->message_type(0);
  static const int TimeSegment_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSegment, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSegment, cool_down_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSegment, deadline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSegment, earliest_starts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSegment, latest_starts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSegment, priority_),
  };
  TimeSegment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TimeSegment_descriptor_,
      TimeSegment::default_instance_,
      TimeSegment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSegment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSegment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TimeSegment));
  Task_descriptor_ = file->message_type(1);
  static const int Task_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, pre_req_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, time_),
  };
  Task_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Task_descriptor_,
      Task::default_instance_,
      Task_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Task));
  Schedule_descriptor_ = file->message_type(2);
  static const int Schedule_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Schedule, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Schedule, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Schedule, end_),
  };
  Schedule_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Schedule_descriptor_,
      Schedule::default_instance_,
      Schedule_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Schedule, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Schedule, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Schedule));
  Tasks_descriptor_ = file->message_type(3);
  static const int Tasks_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tasks, tasks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tasks, global_start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tasks, rest_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tasks, max_heap_size_),
  };
  Tasks_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Tasks_descriptor_,
      Tasks::default_instance_,
      Tasks_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tasks, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tasks, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Tasks));
  Schedules_descriptor_ = file->message_type(4);
  static const int Schedules_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Schedules, schedules_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Schedules, search_steps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Schedules, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Schedules, incomplete_tasks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Schedules, total_duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Schedules, used_duration_),
  };
  Schedules_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Schedules_descriptor_,
      Schedules::default_instance_,
      Schedules_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Schedules, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Schedules, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Schedules));
  Schedules_FinalStatus_descriptor_ = Schedules_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_task_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TimeSegment_descriptor_, &TimeSegment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Task_descriptor_, &Task::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Schedule_descriptor_, &Schedule::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Tasks_descriptor_, &Tasks::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Schedules_descriptor_, &Schedules::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_task_2eproto() {
  delete TimeSegment::default_instance_;
  delete TimeSegment_reflection_;
  delete Task::default_instance_;
  delete Task_reflection_;
  delete Schedule::default_instance_;
  delete Schedule_reflection_;
  delete Tasks::default_instance_;
  delete Tasks_reflection_;
  delete Schedules::default_instance_;
  delete Schedules_reflection_;
}

void protobuf_AddDesc_task_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ntask.proto\022\010schedule\"\215\001\n\013TimeSegment\022\020"
    "\n\010duration\030\001 \001(\005\022\024\n\tcool_down\030\002 \001(\005:\0010\022\020"
    "\n\010deadline\030\003 \001(\005\022\027\n\017earliest_starts\030\004 \003("
    "\005\022\025\n\rlatest_starts\030\005 \003(\005\022\024\n\010priority\030\006 \001"
    "(\005:\00210\"[\n\004Task\022\n\n\002id\030\001 \001(\t\022\r\n\005group\030\002 \001("
    "\t\022\023\n\013pre_req_ids\030\003 \003(\t\022#\n\004time\030\005 \001(\0132\025.s"
    "chedule.TimeSegment\"2\n\010Schedule\022\n\n\002id\030\001 "
    "\001(\t\022\r\n\005start\030\002 \001(\005\022\013\n\003end\030\003 \001(\005\"y\n\005Tasks"
    "\022\035\n\005tasks\030\001 \003(\0132\016.schedule.Task\022\034\n\021globa"
    "l_start_time\030\002 \001(\005:\0010\022\024\n\trest_time\030\003 \001(\005"
    ":\0010\022\035\n\rmax_heap_size\030\004 \001(\005:\006500000\"\356\001\n\tS"
    "chedules\022%\n\tschedules\030\001 \003(\0132\022.schedule.S"
    "chedule\022\024\n\014search_steps\030\002 \001(\005\022/\n\006status\030"
    "\003 \001(\0162\037.schedule.Schedules.FinalStatus\022\030"
    "\n\020incomplete_tasks\030\004 \003(\t\022\026\n\016total_durati"
    "on\030\005 \001(\005\022\025\n\rused_duration\030\006 \001(\005\"*\n\013Final"
    "Status\022\013\n\007SUCCESS\020\000\022\016\n\nINCOMPLETE\020\001", 675);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "task.proto", &protobuf_RegisterTypes);
  TimeSegment::default_instance_ = new TimeSegment();
  Task::default_instance_ = new Task();
  Schedule::default_instance_ = new Schedule();
  Tasks::default_instance_ = new Tasks();
  Schedules::default_instance_ = new Schedules();
  TimeSegment::default_instance_->InitAsDefaultInstance();
  Task::default_instance_->InitAsDefaultInstance();
  Schedule::default_instance_->InitAsDefaultInstance();
  Tasks::default_instance_->InitAsDefaultInstance();
  Schedules::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_task_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_task_2eproto {
  StaticDescriptorInitializer_task_2eproto() {
    protobuf_AddDesc_task_2eproto();
  }
} static_descriptor_initializer_task_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TimeSegment::kDurationFieldNumber;
const int TimeSegment::kCoolDownFieldNumber;
const int TimeSegment::kDeadlineFieldNumber;
const int TimeSegment::kEarliestStartsFieldNumber;
const int TimeSegment::kLatestStartsFieldNumber;
const int TimeSegment::kPriorityFieldNumber;
#endif  // !_MSC_VER

TimeSegment::TimeSegment()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schedule.TimeSegment)
}

void TimeSegment::InitAsDefaultInstance() {
}

TimeSegment::TimeSegment(const TimeSegment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:schedule.TimeSegment)
}

void TimeSegment::SharedCtor() {
  _cached_size_ = 0;
  duration_ = 0;
  cool_down_ = 0;
  deadline_ = 0;
  priority_ = 10;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TimeSegment::~TimeSegment() {
  // @@protoc_insertion_point(destructor:schedule.TimeSegment)
  SharedDtor();
}

void TimeSegment::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TimeSegment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimeSegment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimeSegment_descriptor_;
}

const TimeSegment& TimeSegment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2eproto();
  return *default_instance_;
}

TimeSegment* TimeSegment::default_instance_ = NULL;

TimeSegment* TimeSegment::New() const {
  return new TimeSegment;
}

void TimeSegment::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TimeSegment*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 39) {
    ZR_(duration_, cool_down_);
    deadline_ = 0;
    priority_ = 10;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  earliest_starts_.Clear();
  latest_starts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TimeSegment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schedule.TimeSegment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 duration = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cool_down;
        break;
      }

      // optional int32 cool_down = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_cool_down:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cool_down_)));
          set_has_cool_down();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_deadline;
        break;
      }

      // optional int32 deadline = 3;
      case 3: {
        if (tag == 24) {
         parse_deadline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deadline_)));
          set_has_deadline();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_earliest_starts;
        break;
      }

      // repeated int32 earliest_starts = 4;
      case 4: {
        if (tag == 32) {
         parse_earliest_starts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_earliest_starts())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_earliest_starts())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_earliest_starts;
        if (input->ExpectTag(40)) goto parse_latest_starts;
        break;
      }

      // repeated int32 latest_starts = 5;
      case 5: {
        if (tag == 40) {
         parse_latest_starts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_latest_starts())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_latest_starts())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_latest_starts;
        if (input->ExpectTag(48)) goto parse_priority;
        break;
      }

      // optional int32 priority = 6 [default = 10];
      case 6: {
        if (tag == 48) {
         parse_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priority_)));
          set_has_priority();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schedule.TimeSegment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schedule.TimeSegment)
  return false;
#undef DO_
}

void TimeSegment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schedule.TimeSegment)
  // optional int32 duration = 1;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->duration(), output);
  }

  // optional int32 cool_down = 2 [default = 0];
  if (has_cool_down()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cool_down(), output);
  }

  // optional int32 deadline = 3;
  if (has_deadline()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->deadline(), output);
  }

  // repeated int32 earliest_starts = 4;
  for (int i = 0; i < this->earliest_starts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->earliest_starts(i), output);
  }

  // repeated int32 latest_starts = 5;
  for (int i = 0; i < this->latest_starts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->latest_starts(i), output);
  }

  // optional int32 priority = 6 [default = 10];
  if (has_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->priority(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schedule.TimeSegment)
}

::google::protobuf::uint8* TimeSegment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:schedule.TimeSegment)
  // optional int32 duration = 1;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->duration(), target);
  }

  // optional int32 cool_down = 2 [default = 0];
  if (has_cool_down()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cool_down(), target);
  }

  // optional int32 deadline = 3;
  if (has_deadline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->deadline(), target);
  }

  // repeated int32 earliest_starts = 4;
  for (int i = 0; i < this->earliest_starts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->earliest_starts(i), target);
  }

  // repeated int32 latest_starts = 5;
  for (int i = 0; i < this->latest_starts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->latest_starts(i), target);
  }

  // optional int32 priority = 6 [default = 10];
  if (has_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->priority(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schedule.TimeSegment)
  return target;
}

int TimeSegment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 duration = 1;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duration());
    }

    // optional int32 cool_down = 2 [default = 0];
    if (has_cool_down()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cool_down());
    }

    // optional int32 deadline = 3;
    if (has_deadline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deadline());
    }

    // optional int32 priority = 6 [default = 10];
    if (has_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->priority());
    }

  }
  // repeated int32 earliest_starts = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->earliest_starts_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->earliest_starts(i));
    }
    total_size += 1 * this->earliest_starts_size() + data_size;
  }

  // repeated int32 latest_starts = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->latest_starts_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->latest_starts(i));
    }
    total_size += 1 * this->latest_starts_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeSegment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TimeSegment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TimeSegment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TimeSegment::MergeFrom(const TimeSegment& from) {
  GOOGLE_CHECK_NE(&from, this);
  earliest_starts_.MergeFrom(from.earliest_starts_);
  latest_starts_.MergeFrom(from.latest_starts_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_cool_down()) {
      set_cool_down(from.cool_down());
    }
    if (from.has_deadline()) {
      set_deadline(from.deadline());
    }
    if (from.has_priority()) {
      set_priority(from.priority());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TimeSegment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeSegment::CopyFrom(const TimeSegment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeSegment::IsInitialized() const {

  return true;
}

void TimeSegment::Swap(TimeSegment* other) {
  if (other != this) {
    std::swap(duration_, other->duration_);
    std::swap(cool_down_, other->cool_down_);
    std::swap(deadline_, other->deadline_);
    earliest_starts_.Swap(&other->earliest_starts_);
    latest_starts_.Swap(&other->latest_starts_);
    std::swap(priority_, other->priority_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TimeSegment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TimeSegment_descriptor_;
  metadata.reflection = TimeSegment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Task::kIdFieldNumber;
const int Task::kGroupFieldNumber;
const int Task::kPreReqIdsFieldNumber;
const int Task::kTimeFieldNumber;
#endif  // !_MSC_VER

Task::Task()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schedule.Task)
}

void Task::InitAsDefaultInstance() {
  time_ = const_cast< ::schedule::TimeSegment*>(&::schedule::TimeSegment::default_instance());
}

Task::Task(const Task& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:schedule.Task)
}

void Task::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Task::~Task() {
  // @@protoc_insertion_point(destructor:schedule.Task)
  SharedDtor();
}

void Task::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (group_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_;
  }
  if (this != default_instance_) {
    delete time_;
  }
}

void Task::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Task::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Task_descriptor_;
}

const Task& Task::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2eproto();
  return *default_instance_;
}

Task* Task::default_instance_ = NULL;

Task* Task::New() const {
  return new Task;
}

void Task::Clear() {
  if (_has_bits_[0 / 32] & 11) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_group()) {
      if (group_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        group_->clear();
      }
    }
    if (has_time()) {
      if (time_ != NULL) time_->::schedule::TimeSegment::Clear();
    }
  }
  pre_req_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Task::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schedule.Task)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_group;
        break;
      }

      // optional string group = 2;
      case 2: {
        if (tag == 18) {
         parse_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->group().data(), this->group().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "group");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pre_req_ids;
        break;
      }

      // repeated string pre_req_ids = 3;
      case 3: {
        if (tag == 26) {
         parse_pre_req_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_pre_req_ids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pre_req_ids(this->pre_req_ids_size() - 1).data(),
            this->pre_req_ids(this->pre_req_ids_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pre_req_ids");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pre_req_ids;
        if (input->ExpectTag(42)) goto parse_time;
        break;
      }

      // optional .schedule.TimeSegment time = 5;
      case 5: {
        if (tag == 42) {
         parse_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schedule.Task)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schedule.Task)
  return false;
#undef DO_
}

void Task::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schedule.Task)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string group = 2;
  if (has_group()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group().data(), this->group().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "group");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->group(), output);
  }

  // repeated string pre_req_ids = 3;
  for (int i = 0; i < this->pre_req_ids_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->pre_req_ids(i).data(), this->pre_req_ids(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "pre_req_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->pre_req_ids(i), output);
  }

  // optional .schedule.TimeSegment time = 5;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schedule.Task)
}

::google::protobuf::uint8* Task::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:schedule.Task)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string group = 2;
  if (has_group()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group().data(), this->group().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "group");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->group(), target);
  }

  // repeated string pre_req_ids = 3;
  for (int i = 0; i < this->pre_req_ids_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pre_req_ids(i).data(), this->pre_req_ids(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pre_req_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->pre_req_ids(i), target);
  }

  // optional .schedule.TimeSegment time = 5;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schedule.Task)
  return target;
}

int Task::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string group = 2;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group());
    }

    // optional .schedule.TimeSegment time = 5;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->time());
    }

  }
  // repeated string pre_req_ids = 3;
  total_size += 1 * this->pre_req_ids_size();
  for (int i = 0; i < this->pre_req_ids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->pre_req_ids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Task::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Task* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Task*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Task::MergeFrom(const Task& from) {
  GOOGLE_CHECK_NE(&from, this);
  pre_req_ids_.MergeFrom(from.pre_req_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_group()) {
      set_group(from.group());
    }
    if (from.has_time()) {
      mutable_time()->::schedule::TimeSegment::MergeFrom(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Task::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Task::CopyFrom(const Task& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Task::IsInitialized() const {

  return true;
}

void Task::Swap(Task* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(group_, other->group_);
    pre_req_ids_.Swap(&other->pre_req_ids_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Task::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Task_descriptor_;
  metadata.reflection = Task_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Schedule::kIdFieldNumber;
const int Schedule::kStartFieldNumber;
const int Schedule::kEndFieldNumber;
#endif  // !_MSC_VER

Schedule::Schedule()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schedule.Schedule)
}

void Schedule::InitAsDefaultInstance() {
}

Schedule::Schedule(const Schedule& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:schedule.Schedule)
}

void Schedule::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_ = 0;
  end_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Schedule::~Schedule() {
  // @@protoc_insertion_point(destructor:schedule.Schedule)
  SharedDtor();
}

void Schedule::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void Schedule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Schedule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Schedule_descriptor_;
}

const Schedule& Schedule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2eproto();
  return *default_instance_;
}

Schedule* Schedule::default_instance_ = NULL;

Schedule* Schedule::New() const {
  return new Schedule;
}

void Schedule::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Schedule*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(start_, end_);
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Schedule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schedule.Schedule)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_start;
        break;
      }

      // optional int32 start = 2;
      case 2: {
        if (tag == 16) {
         parse_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_)));
          set_has_start();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_end;
        break;
      }

      // optional int32 end = 3;
      case 3: {
        if (tag == 24) {
         parse_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_)));
          set_has_end();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schedule.Schedule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schedule.Schedule)
  return false;
#undef DO_
}

void Schedule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schedule.Schedule)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional int32 start = 2;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->start(), output);
  }

  // optional int32 end = 3;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->end(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schedule.Schedule)
}

::google::protobuf::uint8* Schedule::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:schedule.Schedule)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional int32 start = 2;
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->start(), target);
  }

  // optional int32 end = 3;
  if (has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->end(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schedule.Schedule)
  return target;
}

int Schedule::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional int32 start = 2;
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start());
    }

    // optional int32 end = 3;
    if (has_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->end());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Schedule::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Schedule* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Schedule*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Schedule::MergeFrom(const Schedule& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_start()) {
      set_start(from.start());
    }
    if (from.has_end()) {
      set_end(from.end());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Schedule::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Schedule::CopyFrom(const Schedule& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Schedule::IsInitialized() const {

  return true;
}

void Schedule::Swap(Schedule* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(start_, other->start_);
    std::swap(end_, other->end_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Schedule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Schedule_descriptor_;
  metadata.reflection = Schedule_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Tasks::kTasksFieldNumber;
const int Tasks::kGlobalStartTimeFieldNumber;
const int Tasks::kRestTimeFieldNumber;
const int Tasks::kMaxHeapSizeFieldNumber;
#endif  // !_MSC_VER

Tasks::Tasks()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schedule.Tasks)
}

void Tasks::InitAsDefaultInstance() {
}

Tasks::Tasks(const Tasks& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:schedule.Tasks)
}

void Tasks::SharedCtor() {
  _cached_size_ = 0;
  global_start_time_ = 0;
  rest_time_ = 0;
  max_heap_size_ = 500000;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Tasks::~Tasks() {
  // @@protoc_insertion_point(destructor:schedule.Tasks)
  SharedDtor();
}

void Tasks::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Tasks::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Tasks::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Tasks_descriptor_;
}

const Tasks& Tasks::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2eproto();
  return *default_instance_;
}

Tasks* Tasks::default_instance_ = NULL;

Tasks* Tasks::New() const {
  return new Tasks;
}

void Tasks::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Tasks*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 14) {
    ZR_(global_start_time_, rest_time_);
    max_heap_size_ = 500000;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  tasks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Tasks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schedule.Tasks)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .schedule.Task tasks = 1;
      case 1: {
        if (tag == 10) {
         parse_tasks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tasks()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_tasks;
        if (input->ExpectTag(16)) goto parse_global_start_time;
        break;
      }

      // optional int32 global_start_time = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_global_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &global_start_time_)));
          set_has_global_start_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_rest_time;
        break;
      }

      // optional int32 rest_time = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_rest_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rest_time_)));
          set_has_rest_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_max_heap_size;
        break;
      }

      // optional int32 max_heap_size = 4 [default = 500000];
      case 4: {
        if (tag == 32) {
         parse_max_heap_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_heap_size_)));
          set_has_max_heap_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schedule.Tasks)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schedule.Tasks)
  return false;
#undef DO_
}

void Tasks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schedule.Tasks)
  // repeated .schedule.Task tasks = 1;
  for (int i = 0; i < this->tasks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tasks(i), output);
  }

  // optional int32 global_start_time = 2 [default = 0];
  if (has_global_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->global_start_time(), output);
  }

  // optional int32 rest_time = 3 [default = 0];
  if (has_rest_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rest_time(), output);
  }

  // optional int32 max_heap_size = 4 [default = 500000];
  if (has_max_heap_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->max_heap_size(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schedule.Tasks)
}

::google::protobuf::uint8* Tasks::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:schedule.Tasks)
  // repeated .schedule.Task tasks = 1;
  for (int i = 0; i < this->tasks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tasks(i), target);
  }

  // optional int32 global_start_time = 2 [default = 0];
  if (has_global_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->global_start_time(), target);
  }

  // optional int32 rest_time = 3 [default = 0];
  if (has_rest_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rest_time(), target);
  }

  // optional int32 max_heap_size = 4 [default = 500000];
  if (has_max_heap_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->max_heap_size(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schedule.Tasks)
  return target;
}

int Tasks::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 global_start_time = 2 [default = 0];
    if (has_global_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->global_start_time());
    }

    // optional int32 rest_time = 3 [default = 0];
    if (has_rest_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rest_time());
    }

    // optional int32 max_heap_size = 4 [default = 500000];
    if (has_max_heap_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_heap_size());
    }

  }
  // repeated .schedule.Task tasks = 1;
  total_size += 1 * this->tasks_size();
  for (int i = 0; i < this->tasks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tasks(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Tasks::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Tasks* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Tasks*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Tasks::MergeFrom(const Tasks& from) {
  GOOGLE_CHECK_NE(&from, this);
  tasks_.MergeFrom(from.tasks_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_global_start_time()) {
      set_global_start_time(from.global_start_time());
    }
    if (from.has_rest_time()) {
      set_rest_time(from.rest_time());
    }
    if (from.has_max_heap_size()) {
      set_max_heap_size(from.max_heap_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Tasks::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tasks::CopyFrom(const Tasks& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tasks::IsInitialized() const {

  return true;
}

void Tasks::Swap(Tasks* other) {
  if (other != this) {
    tasks_.Swap(&other->tasks_);
    std::swap(global_start_time_, other->global_start_time_);
    std::swap(rest_time_, other->rest_time_);
    std::swap(max_heap_size_, other->max_heap_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Tasks::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Tasks_descriptor_;
  metadata.reflection = Tasks_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Schedules_FinalStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Schedules_FinalStatus_descriptor_;
}
bool Schedules_FinalStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Schedules_FinalStatus Schedules::SUCCESS;
const Schedules_FinalStatus Schedules::INCOMPLETE;
const Schedules_FinalStatus Schedules::FinalStatus_MIN;
const Schedules_FinalStatus Schedules::FinalStatus_MAX;
const int Schedules::FinalStatus_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Schedules::kSchedulesFieldNumber;
const int Schedules::kSearchStepsFieldNumber;
const int Schedules::kStatusFieldNumber;
const int Schedules::kIncompleteTasksFieldNumber;
const int Schedules::kTotalDurationFieldNumber;
const int Schedules::kUsedDurationFieldNumber;
#endif  // !_MSC_VER

Schedules::Schedules()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schedule.Schedules)
}

void Schedules::InitAsDefaultInstance() {
}

Schedules::Schedules(const Schedules& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:schedule.Schedules)
}

void Schedules::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  search_steps_ = 0;
  status_ = 0;
  total_duration_ = 0;
  used_duration_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Schedules::~Schedules() {
  // @@protoc_insertion_point(destructor:schedule.Schedules)
  SharedDtor();
}

void Schedules::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Schedules::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Schedules::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Schedules_descriptor_;
}

const Schedules& Schedules::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2eproto();
  return *default_instance_;
}

Schedules* Schedules::default_instance_ = NULL;

Schedules* Schedules::New() const {
  return new Schedules;
}

void Schedules::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Schedules*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(search_steps_, status_);
  ZR_(total_duration_, used_duration_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  schedules_.Clear();
  incomplete_tasks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Schedules::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schedule.Schedules)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .schedule.Schedule schedules = 1;
      case 1: {
        if (tag == 10) {
         parse_schedules:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_schedules()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_schedules;
        if (input->ExpectTag(16)) goto parse_search_steps;
        break;
      }

      // optional int32 search_steps = 2;
      case 2: {
        if (tag == 16) {
         parse_search_steps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &search_steps_)));
          set_has_search_steps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // optional .schedule.Schedules.FinalStatus status = 3;
      case 3: {
        if (tag == 24) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::schedule::Schedules_FinalStatus_IsValid(value)) {
            set_status(static_cast< ::schedule::Schedules_FinalStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_incomplete_tasks;
        break;
      }

      // repeated string incomplete_tasks = 4;
      case 4: {
        if (tag == 34) {
         parse_incomplete_tasks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_incomplete_tasks()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->incomplete_tasks(this->incomplete_tasks_size() - 1).data(),
            this->incomplete_tasks(this->incomplete_tasks_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "incomplete_tasks");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_incomplete_tasks;
        if (input->ExpectTag(40)) goto parse_total_duration;
        break;
      }

      // optional int32 total_duration = 5;
      case 5: {
        if (tag == 40) {
         parse_total_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_duration_)));
          set_has_total_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_used_duration;
        break;
      }

      // optional int32 used_duration = 6;
      case 6: {
        if (tag == 48) {
         parse_used_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &used_duration_)));
          set_has_used_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schedule.Schedules)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schedule.Schedules)
  return false;
#undef DO_
}

void Schedules::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schedule.Schedules)
  // repeated .schedule.Schedule schedules = 1;
  for (int i = 0; i < this->schedules_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->schedules(i), output);
  }

  // optional int32 search_steps = 2;
  if (has_search_steps()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->search_steps(), output);
  }

  // optional .schedule.Schedules.FinalStatus status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  // repeated string incomplete_tasks = 4;
  for (int i = 0; i < this->incomplete_tasks_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->incomplete_tasks(i).data(), this->incomplete_tasks(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "incomplete_tasks");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->incomplete_tasks(i), output);
  }

  // optional int32 total_duration = 5;
  if (has_total_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->total_duration(), output);
  }

  // optional int32 used_duration = 6;
  if (has_used_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->used_duration(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schedule.Schedules)
}

::google::protobuf::uint8* Schedules::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:schedule.Schedules)
  // repeated .schedule.Schedule schedules = 1;
  for (int i = 0; i < this->schedules_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->schedules(i), target);
  }

  // optional int32 search_steps = 2;
  if (has_search_steps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->search_steps(), target);
  }

  // optional .schedule.Schedules.FinalStatus status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->status(), target);
  }

  // repeated string incomplete_tasks = 4;
  for (int i = 0; i < this->incomplete_tasks_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->incomplete_tasks(i).data(), this->incomplete_tasks(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "incomplete_tasks");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->incomplete_tasks(i), target);
  }

  // optional int32 total_duration = 5;
  if (has_total_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->total_duration(), target);
  }

  // optional int32 used_duration = 6;
  if (has_used_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->used_duration(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schedule.Schedules)
  return target;
}

int Schedules::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 search_steps = 2;
    if (has_search_steps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->search_steps());
    }

    // optional .schedule.Schedules.FinalStatus status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional int32 total_duration = 5;
    if (has_total_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_duration());
    }

    // optional int32 used_duration = 6;
    if (has_used_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->used_duration());
    }

  }
  // repeated .schedule.Schedule schedules = 1;
  total_size += 1 * this->schedules_size();
  for (int i = 0; i < this->schedules_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->schedules(i));
  }

  // repeated string incomplete_tasks = 4;
  total_size += 1 * this->incomplete_tasks_size();
  for (int i = 0; i < this->incomplete_tasks_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->incomplete_tasks(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Schedules::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Schedules* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Schedules*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Schedules::MergeFrom(const Schedules& from) {
  GOOGLE_CHECK_NE(&from, this);
  schedules_.MergeFrom(from.schedules_);
  incomplete_tasks_.MergeFrom(from.incomplete_tasks_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_search_steps()) {
      set_search_steps(from.search_steps());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_total_duration()) {
      set_total_duration(from.total_duration());
    }
    if (from.has_used_duration()) {
      set_used_duration(from.used_duration());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Schedules::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Schedules::CopyFrom(const Schedules& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Schedules::IsInitialized() const {

  return true;
}

void Schedules::Swap(Schedules* other) {
  if (other != this) {
    schedules_.Swap(&other->schedules_);
    std::swap(search_steps_, other->search_steps_);
    std::swap(status_, other->status_);
    incomplete_tasks_.Swap(&other->incomplete_tasks_);
    std::swap(total_duration_, other->total_duration_);
    std::swap(used_duration_, other->used_duration_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Schedules::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Schedules_descriptor_;
  metadata.reflection = Schedules_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace schedule

// @@protoc_insertion_point(global_scope)
